{"version":3,"sources":["Item/Item.styles.ts","Item/Item.tsx","Header/Header.styles.ts","Header/Header.tsx","Cart/CartItem/CartItem.styles.ts","Cart/CartItem/CartItem.tsx","Cart/Cart.styles.ts","Cart/Cart.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Wrapper","styled","div","Item","item","handleAddToCart","src","image","alt","title","description","price","Button","onClick","StyledHeader","header","Header","CartItem","addToCart","removeFromCart","className","amount","toFixed","size","disableElevation","variant","id","aside","Cart","items","cartItems","length","map","reduce","ack","GlobalStyle","createGlobalStyle","StyledButton","IconButton","getProducts","a","fetch","json","App","useState","cartOpen","setCartOpen","setCartItems","useQuery","data","isLoading","error","console","log","clickedItem","prev","find","LinearProgress","Badge","badgeContent","color","Drawer","anchor","open","onClose","Grid","container","spacing","xs","sm","client","QueryClient","ReactDOM","render","QueryClientProvider","document","getElementById"],"mappings":"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","file":"static/js/main.00d74084.chunk.js","sourcesContent":["//dependencies\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    flex-direction: column;\r\n    width: 100%;\r\n    overflow: hidden;\r\n    border: 2px solid rgba(118,8,23,1);\r\n    background-color: white;\r\n    border-radius: 20px;\r\n    height: 100%;\r\n\r\n    button {\r\n        width: 100%;\r\n        border-radius: 0;\r\n        color: white;\r\n        background-image: linear-gradient( 178.2deg,  rgba(118,8,23,1) 10.9%, rgba(158,12,33,1) 62.6% );\r\n        font-size: 1rem;\r\n\r\n        &:hover {\r\n            background-image: linear-gradient( 178.2deg,  rgba(158,12,33,1) 10.9%, rgba(118,8,23,1) 62.6% );\r\n        }\r\n    }\r\n\r\n    img {\r\n        max-height: 250px;\r\n        object-fit: cover;\r\n        border-radius: 20px 20px 0 0;\r\n    }\r\n\r\n    div {\r\n        font-family: 'Dosis', sans-serif;;\r\n        padding: 1.5rem;\r\n        height: 100%;\r\n    }\r\n`;\r\n\r\n\r\n","//components\r\nimport Button from \"@material-ui/core/Button\";\r\n//types\r\nimport { CartItemType } from \"../App\";\r\n//styles\r\nimport { Wrapper } from \"./Item.styles\";\r\n\r\ntype Props = {\r\n    item: CartItemType;\r\n    handleAddToCart: (clickedItem: CartItemType) => void;\r\n}\r\n\r\nconst Item: React.FC<Props> = ({ item, handleAddToCart }) => (\r\n    <Wrapper>\r\n        <img src={item.image} alt={item.title} />\r\n        <div>\r\n            <h3>{item.title}</h3>\r\n            <p>{item.description}</p>\r\n            <h3>${item.price}</h3>\r\n        </div>\r\n        <Button onClick={() => handleAddToCart(item)}>Add to cart</Button>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Item;","//dependencies\r\nimport styled from \"styled-components\";\r\n\r\nexport const StyledHeader = styled.header`\r\n    font-family: Arial, Helvetica, sans-serif; \r\n    width: 100vw;\r\n    background-color: white;\r\n    text-align: center;\r\n    position: relative;\r\n    padding: 2.3rem 2rem;\r\n    box-shadow: inset 0rem -0.25rem 0.313rem 0rem rgba(227, 220, 227, 0.68);\r\n\r\n    h1 {\r\n        text-transform: uppercase;\r\n        font-size: 2rem;\r\n        font-weight: 500;\r\n        letter-spacing: 0.2rem;\r\n    }\r\n`;","//dependencies\r\nimport * as React from 'react';\r\n//styled components\r\nimport { StyledHeader } from \"./Header.styles\";\r\n \r\nconst Header: React.FC = () => {\r\n    return (\r\n        <StyledHeader>\r\n            <h1>My Store</h1>\r\n        </StyledHeader>\r\n     );\r\n}\r\n \r\nexport default Header;","//dependencies\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    font-family: \"Display\", sans-serif;\r\n    border-bottom: 1px solid grey;\r\n    padding: 1.5rem 0;\r\n\r\n    div {\r\n        flex: 1;\r\n    }\r\n\r\n    .information,\r\n    .buttons {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        margin-top: 1rem;\r\n    }\r\n\r\n    img {\r\n        max-width: 80px;\r\n        object-fit: cover;\r\n        margin-left: 2rem;\r\n    }\r\n`;","//Components\r\nimport Button from \"@material-ui/core/Button\";\r\n//Types\r\nimport { CartItemType } from \"../../App\";\r\n//Styles\r\nimport { Wrapper } from \"./CartItem.styles\";\r\n\r\ntype Props = {\r\n    item: CartItemType;\r\n    addToCart: (clickedItem: CartItemType) => void;\r\n    removeFromCart: (id: number) => void;\r\n}\r\n\r\nconst CartItem: React.FC<Props> = ({item, addToCart, removeFromCart}) => (\r\n    <Wrapper>\r\n        <div>\r\n            <h3>{item.title}</h3>\r\n            <div className=\"information\">\r\n                <p>Price: ${item.price}</p>\r\n                <p>Total: ${(item.amount * item.price).toFixed(2)}</p>\r\n            </div>\r\n            <div className=\"buttons\">\r\n                <Button\r\n                    size=\"small\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={()=> removeFromCart(item.id)}\r\n                >\r\n                    -\r\n                </Button>\r\n                <p>{item.amount}</p>\r\n                                <Button\r\n                    size=\"small\"\r\n                    disableElevation\r\n                    variant=\"contained\"\r\n                    onClick={()=> addToCart(item)}\r\n                >\r\n                    +\r\n                </Button>\r\n            </div>\r\n        </div>\r\n            <img src={item.image} alt={item.title} />\r\n    </Wrapper>\r\n);\r\n\r\nexport default CartItem;","//dependencies\r\nimport styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.aside`\r\n    font-family: 'Dosis', sans-serif;\r\n    width: 70vw;\r\n    max-width: 31.25rem;\r\n    padding: 1.5rem;\r\n\r\n    h2 {\r\n        margin: 1.5rem auto;\r\n        text-transform: uppercase;\r\n        letter-spacing: 0.1rem;\r\n    }\r\n`;","//components\r\nimport CartItem from \"./CartItem/CartItem\";\r\n//styles\r\nimport { Wrapper } from \"./Cart.styles\";\r\n//types\r\nimport { CartItemType } from \"../App\";\r\n\r\ntype Props = {\r\n    cartItems: CartItemType[];\r\n    addToCart: (clickedItem: CartItemType) => void;\r\n    removeFromCart: (id: number) => void;\r\n}\r\n\r\nconst Cart: React.FC<Props> = ({ cartItems, addToCart, removeFromCart }) => {\r\n    const calculateTotal = (items: CartItemType[]) => (\r\n        items.reduce((ack: number, item) => ack + item.amount * item.price, 0)\r\n    );\r\n    \r\n    return (\r\n        <Wrapper>\r\n            <h2>Your Shopping Cart</h2>\r\n            {cartItems.length === 0 ? <p>No items in cart</p> : null}\r\n            {cartItems.map(item => (\r\n                <CartItem\r\n                    key={item.id}\r\n                    item={item}\r\n                    addToCart={addToCart}\r\n                    removeFromCart={removeFromCart}\r\n                />\r\n            ))}\r\n            <h2>Total: ${calculateTotal(cartItems).toFixed(2)}</h2>\r\n        </Wrapper>\r\n    );\r\n}\r\n\r\nexport default Cart;","//dependencies\r\nimport styled, { createGlobalStyle } from \"styled-components\";\r\n//components\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Dosis:wght@200;400;600;700&display=swap');\r\n\r\n* {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: 'Dosis', sans-serif;\r\n  color: #555555;\r\n  background-image: linear-gradient(135deg, #fdfcfb 0%, #e2d1c3 100%);\r\n  letter-spacing: 0.07rem;\r\n}`;\r\n\r\nexport const Wrapper = styled.div`\r\n    margin: 1.5rem auto;\r\n    width: 80vw;\r\n`;\r\n\r\nexport const StyledButton = styled(IconButton)`\r\n    position: relative;\r\n    z-index: 100;\r\n    left: 80vw;\r\n    top: -5rem;\r\n\r\n    &:hover{\r\n        color: white;\r\n        border-color: white;\r\n        background: linear-gradient(to right, #cb356b, #bd3f32);\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;","//dependencies\nimport { useState } from \"react\";\nimport { useQuery } from \"react-query\";\n//components\nimport Item from \"./Item/Item\";\nimport Header from \"./Header/Header\";\nimport Cart from \"./Cart/Cart\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\nimport Grid from \"@material-ui/core/Grid\";\nimport AddShoppingCartIcon from \"@material-ui/icons/AddShoppingCart\";\nimport Badge from \"@material-ui/core/Badge\";\n// //styles\nimport GlobalStyle, { Wrapper, StyledButton } from \"./App.styles\";\n//Types\nexport type CartItemType = {\n  id: number;\n  category: string;\n  description: string;\n  image: string;\n  price: number;\n  title: string;\n  amount: number;\n};\n\nconst getProducts = async (): Promise<CartItemType[]> => (\n  await (await fetch('https://fakestoreapi.com/products')).json()\n);\n\nconst App = () => {\n  const [cartOpen, setCartOpen] = useState(false);\n  const [cartItems, setCartItems] = useState([] as CartItemType[]);\n  const { data, isLoading, error } = useQuery<CartItemType[]>('products', getProducts);\n  console.log(data);\n\n  const getTotalItems = (items: CartItemType[]) => null;\n\n  const handleAddToCart = (clickedItem: CartItemType) => {\n    setCartItems(prev => {\n      //Is the item already added in the cart?\n      const isItemInCart = prev.find(item => item.id === clickedItem.id);\n\n      if (isItemInCart) {\n        return prev.map(item =>\n          item.id === clickedItem.id\n            ? { ...item, amount: item.amount + 1 }\n            : item\n        );\n      }\n      //First time the itemn is added\n      return [...prev, { ...clickedItem, amount: 1 }];\n    });\n  };\n\n  const handleRemoveFromCart = (id: number) => {\n    setCartItems(prev => (\n      prev.reduce((ack, item) => {\n        if (item.id === id) {\n          if (item.amount === 1) return ack;\n          return [...ack, { ...item, amount: item.amount - 1 }];\n        } else {\n          return [...ack, item];\n        }\n      }, [] as CartItemType[])\n    ))\n  };\n\n  if (isLoading) return (\n    <>\n      <GlobalStyle />\n      <Header />\n      <LinearProgress />\n    </>\n    );\n  if (error) return (\n    <>\n      <GlobalStyle />\n      <Header />\n      <div>Something went wrong...</div>\n    </>\n  ); \n\n  return (\n    <>\n      <GlobalStyle />\n      <Header />\n        <StyledButton onClick={() => setCartOpen(true)}>\n          <Badge badgeContent={getTotalItems(cartItems)} color=\"error\">\n            <AddShoppingCartIcon />\n          </Badge>\n        </StyledButton>\n      <Drawer anchor='right' open={cartOpen} onClose={() => setCartOpen(false)}>\n        <Cart cartItems={cartItems} addToCart={handleAddToCart} removeFromCart={handleRemoveFromCart}/>\n      </Drawer>\n      <Wrapper>\n        <Grid container spacing={3}>\n          {data?.map(item => (\n            <Grid item key={item.id} xs={12} sm={4}>\n              <Item item={item} handleAddToCart={handleAddToCart} />\n            </Grid>\n          ))}\n        </Grid>\n      </Wrapper>\n    </>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { QueryClient, QueryClientProvider } from \"react-query\";\n\nconst client = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={client}>\n    <App />\n  </QueryClientProvider>,\n  document.getElementById('root'));\n\n"],"sourceRoot":""}